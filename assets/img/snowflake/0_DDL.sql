CREATE DATABASE PROJECT_TWO;
USE DATABASE PROJECT_TWO;

# Staging
CREATE SCHEMA "PROJECT_TWO"."STAGING";
USE SCHEMA STAGING;

## Staging Tables
CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."BUSINESS" (
    "BUSINESS_ID" STRING, "NAME" STRING, "ADDRESS" STRING, "CITY" STRING, "STATE" STRING, "POSTAL_CODE" STRING, "LATITUDE" FLOAT, "LONGITUDE" FLOAT, "STARS" FLOAT, "REVIEW_COUNT" INTEGER, "IS_OPEN" INTEGER, "ATTRIBUTES" OBJECT, "CATEGORIES" STRING, "HOURS" OBJECT
    );

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."CHECKIN" (
    "BUSINESS_ID" STRING, "DATE" STRING
    );

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."COVID_FEATURES" (
    "BUSINESS_ID" STRING, "HIGHLIGHTS" VARIANT, "DELIVERY_OR_TAKEOUT" BOOLEAN, "GRUBHUB_ENABLED" BOOLEAN, "CALL_TO_ACTION_ENABLED" BOOLEAN, "REQUEST_A_QUOTE_ENABLED" BOOLEAN, "COVID_BANNER" VARIANT, "TEMPORARY_CLOSED_UNTIL" VARIANT, "VIRTUAL_SERVICES_OFFERED" VARIANT
    );

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."REVIEW" (
    "REVIEW_ID" STRING, "USER_ID" STRING, "BUSINESS_ID" STRING, "STARS" INTEGER, "USEFUL" INTEGER, "FUNNY" INTEGER, "COOL" INTEGER, "TEXT" STRING, "DATE" TIMESTAMP
    );

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."TIP" (
    "USER_ID" STRING, "BUSINESS_ID" STRING, "TEXT" STRING, "DATE" TIMESTAMP, "COMPLIMENT_COUNT" INTEGER);

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."USER" (
    "USER_ID" STRING, "NAME" STRING, "REVIEW_COUNT" INTEGER, "YELPING_SINCE" TIMESTAMP, "USEFUL" INTEGER, "FUNNY" INTEGER, "COOL" INTEGER, "ELITE" STRING, "FRIENDS" STRING, "FANS" INTEGER, "AVERAGE_STARS" FLOAT, "COMPLIMENT_HOT" INTEGER,
    "COMPLIMENT_MORE" INTEGER, "COMPLIMENT_PROFILE" INTEGER, "COMPLIMENT_CUTE" INTEGER, "COMPLIMENT_LIST" INTEGER, "COMPLIMENT_NOTE" INTEGER, "COMPLIMENT_PLAIN" INTEGER, "COMPLIMENT_COOL" INTEGER, "COMPLIMENT_FUNNY" INTEGER, "COMPLIMENT_WRITER" INTEGER, "COMPLIMENT_PHOTOS" INTEGER);

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."TEMPERATURE" ("DATE" DATE, "MIN" FLOAT, "MAX" FLOAT, "NORMAL_MIN" FLOAT, "NORMAL_MAX" FLOAT);
INSERT INTO PROJECT_TWO.STAGING.TEMPERATURE
SELECT
    CAST(CONCAT(SUBSTR(t.$1, 0, 4), '-', SUBSTR(t.$1, 5, 2), '-', SUBSTR(t.$1, 7, 2)) AS DATE) AS DATE,
    t.$2 AS MIN,
    t.$3 AS MAX,
    t.$4 AS NORMAL_MIN,
    t.$5 AS NORMAL_MAX
FROM @my_csv_stage/temperature.csv t;

CREATE OR REPLACE TABLE "PROJECT_TWO"."STAGING"."PRECIPITATION" ("DATE" DATE, "PRECIPITATION" FLOAT, "PRECIPITATION_NORMAL" FLOAT);
INSERT INTO PROJECT_TWO.STAGING.PRECIPITATION
SELECT
    CAST(CONCAT(SUBSTR(t.$1, 0, 4), '-', SUBSTR(t.$1, 5, 2), '-', SUBSTR(t.$1, 7, 2)) AS DATE) AS DATE,
    CASE WHEN t.$2 = 'T' THEN NULL ELSE t.$2 END AS precipitation,
    CASE WHEN t.$3 = 'T' THEN NULL ELSE t.$3 END AS precipitation_normal
FROM @my_csv_stage/precipitation.csv t;

## Staging stages and file formats
CREATE FILE FORMAT "PROJECT_TWO"."STAGING".MYCSVFILEFORMAT TYPE = 'CSV' COMPRESSION = 'AUTO' FIELD_DELIMITER = ',' RECORD_DELIMITER = '\n' SKIP_HEADER = 1 FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\N');

CREATE FILE FORMAT "PROJECT_TWO"."STAGING".MYJSONFILEFORMAT TYPE = 'JSON' COMPRESSION = 'AUTO' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO';

CREATE OR REPLACE STAGE my_csv_stage file_format = MYCSVFILEFORMAT;

CREATE OR REPLACE STAGE my_json_stage file_format = MYJSONFILEFORMAT;

# ODS
CREATE SCHEMA "PROJECT_TWO"."ODS";
USE SCHEMA ODS;

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."BUSINESS" (
    "BUSINESS_ID" STRING PRIMARY KEY, "NAME" STRING, "ADDRESS" STRING, "CITY" STRING, "STATE" STRING, "POSTAL_CODE" STRING, "LATITUDE" FLOAT, "LONGITUDE" FLOAT,
    "STARS" FLOAT,
    "REVIEW_COUNT" INTEGER,
    "IS_OPEN" INTEGER,
    "CATEGORIES" STRING,
    "BIKE_PARKING" BOOLEAN,
    "BUSINESS_ACCEPTS_CREDIT_CARDS" BOOLEAN,
    "BUSINESS_PARKING" VARIANT,
    "BY_APPOINTMENT_ONLY" BOOLEAN,
    "CATERS" BOOLEAN,
    "COAT_CHECK" BOOLEAN,
    "DOGS_ALLOWED" BOOLEAN,
    "HAPPY_HOUR" BOOLEAN,
    "HAS_TV" BOOLEAN,
    "OUTDOOR_SEATING" BOOLEAN,
    "RESTAURANTS_DELIVERY" BOOLEAN,
    "RESTAURANTS_PRICE_RANGE2" INTEGER,
    "RESTAURANTS_RESERVATIONS" BOOLEAN,
    "RESTAURANTS_TAKE_OUT" BOOLEAN,
    "WHEELCHAIR_ACCESSIBLE" BOOLEAN,
    "WI_FI" STRING,
    "ALCOHOL" STRING,
    "DRIVE_THRU" BOOLEAN,
    "GOOD_FOR_KIDS" BOOLEAN,
    "RESTAURANTS_ATTIRE" STRING,
    "RESTAURANTS_GOOD_FOR_GROUPS" BOOLEAN,
    "RESTAURANTS_TABLE_SERVICE" BOOLEAN,
    "AMBIENCE" VARIANT,
    "GOOD_FOR_MEAL" VARIANT,
    "NOISE_LEVEL" STRING,
    "BUSINESS_ACCEPTS_BITCOIN" BOOLEAN,
    "BEST_NIGHTS" VARIANT,
    "GOOD_FOR_DANCING" BOOLEAN,
    "MUSIC" VARIANT,
    "SMOKING" STRING,
    "BYOB" BOOLEAN,
    "ACCEPTS_INSURANCE" BOOLEAN,
    "CORKAGE" BOOLEAN,
    "HAIR_SPECIALIZES_IN" VARIANT,
    "BYOB_CORKAGE" STRING,
    "RESTAURANTS_COUNTER_SERVICE" BOOLEAN,
    "OPEN24_HOURS" BOOLEAN,
    "AGES_ALLOWED" STRING,
    "DIETARY_RESTRICTIONS" VARIANT,
    "HOURS_SUNDAY" STRING,
    "HOURS_MONDAY" STRING,
    "HOURS_TUESDAY" STRING,
    "HOURS_WEDNESDAY" STRING,
    "HOURS_THURSDAY" STRING,
    "HOURS_FRIDAY" STRING,
    "HOURS_SATURDAY" STRING
);
INSERT INTO "PROJECT_TWO"."ODS"."BUSINESS"
SELECT
    * EXCLUDE (ATTRIBUTES, HOURS),
    CASE WHEN ATTRIBUTES:BikeParking = 'None' THEN NULL ELSE ATTRIBUTES:BikeParking END AS BIKE_PARKING,
    CASE WHEN ATTRIBUTES:BusinessAcceptsCreditCards = 'None' THEN NULL ELSE ATTRIBUTES:BusinessAcceptsCreditCards END AS BUSINESS_ACCEPTS_CREDIT_CARDS,
    CASE WHEN ATTRIBUTES:BusinessParking = 'None' THEN NULL ELSE ATTRIBUTES:BusinessParking END AS BUSINESS_PARKING,
    CASE WHEN ATTRIBUTES:ByAppointmentOnly = 'None' THEN NULL ELSE ATTRIBUTES:ByAppointmentOnly END AS BY_APPOINTMENT_ONLY,
    CASE WHEN ATTRIBUTES:Caters = 'None' THEN NULL ELSE ATTRIBUTES:Caters END AS CATERS,
    CASE WHEN ATTRIBUTES:CoatCheck = 'None' THEN NULL ELSE ATTRIBUTES:CoatCheck END AS COAT_CHECK,
    CASE WHEN ATTRIBUTES:DogsAllowed = 'None' THEN NULL ELSE ATTRIBUTES:DogsAllowed END AS DOGS_ALLOWED,
    CASE WHEN ATTRIBUTES:HappyHour = 'None' THEN NULL ELSE ATTRIBUTES:HappyHour END AS HAPPY_HOUR,
    CASE WHEN ATTRIBUTES:HasTV = 'None' THEN NULL ELSE ATTRIBUTES:HasTV END AS HAS_TV,
    CASE WHEN ATTRIBUTES:OutdoorSeating = 'None' THEN NULL ELSE ATTRIBUTES:OutdoorSeating END AS OUTDOOR_SEATING,
    CASE WHEN ATTRIBUTES:RestaurantsDelivery = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsDelivery END AS RESTAURANTS_DELIVERY,
    CASE WHEN ATTRIBUTES:RestaurantsPriceRange2 = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsPriceRange2 END AS RESTAURANTS_PRICE_RANGE2,
    CASE WHEN ATTRIBUTES:RestaurantsReservations = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsReservations END AS RESTAURANTS_RESERVATIONS,
    CASE WHEN ATTRIBUTES:RestaurantsTakeOut = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsTakeOut END AS RESTAURANTS_TAKE_OUT,
    CASE WHEN ATTRIBUTES:WheelchairAccessible = 'None' THEN NULL ELSE ATTRIBUTES:WheelchairAccessible END AS WHEELCHAIR_ACCESSIBLE,
    CASE WHEN ATTRIBUTES:WiFi = 'None' THEN NULL ELSE ATTRIBUTES:WiFi END AS WI_FI,
    CASE WHEN ATTRIBUTES:Alcohol = 'None' THEN NULL ELSE ATTRIBUTES:Alcohol END AS ALCOHOL,
    CASE WHEN ATTRIBUTES:DriveThru = 'None' THEN NULL ELSE ATTRIBUTES:DriveThru END AS DRIVE_THRU,
    CASE WHEN ATTRIBUTES:GoodForKids = 'None' THEN NULL ELSE ATTRIBUTES:GoodForKids END AS GOOD_FOR_KIDS,
    CASE WHEN ATTRIBUTES:RestaurantsAttire = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsAttire END AS RESTAURANTS_ATTIRE,
    CASE WHEN ATTRIBUTES:RestaurantsGoodForGroups = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsGoodForGroups END AS RESTAURANTS_GOOD_FOR_GROUPS,
    CASE WHEN ATTRIBUTES:RestaurantsTableService = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsTableService END AS RESTAURANTS_TABLE_SERVICE,
    CASE WHEN ATTRIBUTES:Ambience = 'None' THEN NULL ELSE ATTRIBUTES:Ambience END AS AMBIENCE,
    CASE WHEN ATTRIBUTES:GoodForMeal = 'None' THEN NULL ELSE ATTRIBUTES:GoodForMeal END AS GOOD_FOR_MEAL,
    CASE WHEN ATTRIBUTES:NoiseLevel = 'None' THEN NULL ELSE ATTRIBUTES:NoiseLevel END AS NOISE_LEVEL,
    CASE WHEN ATTRIBUTES:BusinessAcceptsBitcoin = 'None' THEN NULL ELSE ATTRIBUTES:BusinessAcceptsBitcoin END AS BUSINESS_ACCEPTS_BITCOIN,
    CASE WHEN ATTRIBUTES:BestNights = 'None' THEN NULL ELSE ATTRIBUTES:BestNights END AS BEST_NIGHTS,
    CASE WHEN ATTRIBUTES:GoodForDancing = 'None' THEN NULL ELSE ATTRIBUTES:GoodForDancing END AS GOOD_FOR_DANCING,
    CASE WHEN ATTRIBUTES:Music = 'None' THEN NULL ELSE ATTRIBUTES:Music END AS MUSIC,
    CASE WHEN ATTRIBUTES:Smoking = 'None' THEN NULL ELSE ATTRIBUTES:Smoking END AS SMOKING,
    CASE WHEN ATTRIBUTES:BYOB = 'None' THEN NULL ELSE ATTRIBUTES:BYOB END AS BYOB,
    CASE WHEN ATTRIBUTES:AcceptsInsurance = 'None' THEN NULL ELSE ATTRIBUTES:AcceptsInsurance END AS ACCEPTS_INSURANCE,
    CASE WHEN ATTRIBUTES:Corkage = 'None' THEN NULL ELSE ATTRIBUTES:Corkage END AS CORKAGE,
    CASE WHEN ATTRIBUTES:HairSpecializesIn = 'None' THEN NULL ELSE ATTRIBUTES:HairSpecializesIn END AS HAIR_SPECIALIZES_IN,
    CASE WHEN ATTRIBUTES:BYOBCorkage = 'None' THEN NULL ELSE ATTRIBUTES:BYOBCorkage END AS BYOB_CORKAGE,
    CASE WHEN ATTRIBUTES:RestaurantsCounterService = 'None' THEN NULL ELSE ATTRIBUTES:RestaurantsCounterService END AS RESTAURANTS_COUNTER_SERVICE,
    CASE WHEN ATTRIBUTES:Open24Hours = 'None' THEN NULL ELSE ATTRIBUTES:Open24Hours END AS OPEN24_HOURS,
    CASE WHEN ATTRIBUTES:AgesAllowed = 'None' THEN NULL ELSE ATTRIBUTES:AgesAllowed END AS AGES_ALLOWED,
    CASE WHEN ATTRIBUTES:DietaryRestrictions = 'None' THEN NULL ELSE ATTRIBUTES:DietaryRestrictions END AS DIETARY_RESTRICTIONS,
    CASE WHEN HOURS:Sunday = 'None' THEN NULL ELSE HOURS:Sunday END AS HOURS_SUNDAY,
    CASE WHEN HOURS:Monday = 'None' THEN NULL ELSE HOURS:Monday END AS HOURS_MONDAY,
    CASE WHEN HOURS:Tuesday = 'None' THEN NULL ELSE HOURS:Tuesday END AS HOURS_TUESDAY,
    CASE WHEN HOURS:Wednesday = 'None' THEN NULL ELSE HOURS:Wednesday END AS HOURS_WEDNESDAY,
    CASE WHEN HOURS:Thursday = 'None' THEN NULL ELSE HOURS:Thursday END AS HOURS_THURSDAY,
    CASE WHEN HOURS:Friday = 'None' THEN NULL ELSE HOURS:Friday END AS HOURS_FRIDAY,
    CASE WHEN HOURS:Saturday = 'None' THEN NULL ELSE HOURS:Saturday END AS HOURS_SATURDAY
FROM "PROJECT_TWO"."STAGING"."BUSINESS";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."USER" (
    "USER_ID" STRING PRIMARY KEY, "NAME" STRING, "REVIEW_COUNT" INTEGER, "YELPING_SINCE" TIMESTAMP, "USEFUL" INTEGER, "FUNNY" INTEGER, "COOL" INTEGER,
    "ELITE" STRING, "FRIENDS" STRING, "FANS" INTEGER, "AVERAGE_STARS" FLOAT, "COMPLIMENT_HOT" INTEGER, "COMPLIMENT_MORE" INTEGER, "COMPLIMENT_PROFILE" INTEGER,
    "COMPLIMENT_CUTE" INTEGER, "COMPLIMENT_LIST" INTEGER, "COMPLIMENT_NOTE" INTEGER, "COMPLIMENT_PLAIN" INTEGER, "COMPLIMENT_COOL" INTEGER, "COMPLIMENT_FUNNY" INTEGER,
    "COMPLIMENT_WRITER" INTEGER, "COMPLIMENT_PHOTOS" INTEGER);
INSERT INTO "PROJECT_TWO"."ODS"."USER"
SELECT * FROM "PROJECT_TWO"."STAGING"."USER";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."CHECKIN" ("BUSINESS_ID" STRING, "CHECKIN_TIMESTAMP" TIMESTAMP,
    CONSTRAINT fk_CHECKIN_BUSINESS_ID FOREIGN KEY (BUSINESS_ID)
    REFERENCES ODS.BUSINESS (BUSINESS_ID)
);
INSERT INTO "PROJECT_TWO"."ODS"."CHECKIN"
SELECT BUSINESS_ID, CAST(VALUE AS TIMESTAMP) AS CHECKIN_TIMESTAMP
    FROM checkin, LATERAL SPLIT_TO_TABLE(checkin.date, ',');

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."COVID_FEATURES" (
    "BUSINESS_ID" STRING, "HIGHLIGHTS" VARIANT, "DELIVERY_OR_TAKEOUT" BOOLEAN, "GRUBHUB_ENABLED" BOOLEAN, "CALL_TO_ACTION_ENABLED" BOOLEAN,
     "REQUEST_A_QUOTE_ENABLED" BOOLEAN, "COVID_BANNER" STRING, "TEMPORARY_CLOSED_UNTIL" TIMESTAMP, "VIRTUAL_SERVICES_OFFERED" STRING,
    CONSTRAINT fk_COVID_FEATURES_BUSINESS_ID FOREIGN KEY (BUSINESS_ID)
    REFERENCES ODS.BUSINESS (BUSINESS_ID)
);
INSERT INTO "PROJECT_TWO"."ODS"."COVID_FEATURES"
SELECT
    BUSINESS_ID,
    CASE WHEN HIGHLIGHTS = 'FALSE' THEN NULL ELSE HIGHLIGHTS END AS HIGHLIGHTS,
    DELIVERY_OR_TAKEOUT,
    GRUBHUB_ENABLED,
    CALL_TO_ACTION_ENABLED,
    REQUEST_A_QUOTE_ENABLED,
    CASE WHEN COVID_BANNER = 'FALSE' THEN NULL ELSE COVID_BANNER END AS COVID_BANNER,
    CASE WHEN TEMPORARY_CLOSED_UNTIL = 'FALSE' THEN NULL ELSE TEMPORARY_CLOSED_UNTIL END AS TEMPORARY_CLOSED_UNTIL,
    CASE WHEN VIRTUAL_SERVICES_OFFERED = 'FALSE' THEN NULL ELSE VIRTUAL_SERVICES_OFFERED END AS VIRTUAL_SERVICES_OFFERED
FROM "PROJECT_TWO"."STAGING"."COVID_FEATURES";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."REVIEW" (
    "REVIEW_ID" STRING PRIMARY KEY, "USER_ID" STRING, "BUSINESS_ID" STRING, "STARS" INTEGER,
     "USEFUL" INTEGER, "FUNNY" INTEGER, "COOL" INTEGER, "TEXT" STRING, "DATE" TIMESTAMP,
    CONSTRAINT fk_REVIEW_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES ODS.USER (USER_ID),
    CONSTRAINT fk_REVIEW_BUSINESS_ID FOREIGN KEY (BUSINESS_ID)
    REFERENCES ODS.BUSINESS (BUSINESS_ID)
);
INSERT INTO "PROJECT_TWO"."ODS"."REVIEW"
SELECT * FROM "PROJECT_TWO"."STAGING"."REVIEW";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."TIP" ("USER_ID" STRING, "BUSINESS_ID" STRING, "TEXT" STRING, "DATE" TIMESTAMP, "COMPLIMENT_COUNT" INTEGER,
    CONSTRAINT fk_TIP_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES ODS.USER (USER_ID),
    CONSTRAINT fk_TIP_BUSINESS_ID FOREIGN KEY (BUSINESS_ID)
    REFERENCES ODS.BUSINESS (BUSINESS_ID)
);
INSERT INTO "PROJECT_TWO"."ODS"."TIP"
SELECT * FROM "PROJECT_TWO"."STAGING"."TIP";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."TEMPERATURE" ("DATE" DATE PRIMARY KEY, "MIN" FLOAT, "MAX" FLOAT, "NORMAL_MIN" FLOAT, "NORMAL_MAX" FLOAT);
INSERT INTO "PROJECT_TWO"."ODS"."TEMPERATURE"
SELECT * FROM "PROJECT_TWO"."STAGING"."TEMPERATURE";

CREATE OR REPLACE TABLE "PROJECT_TWO"."ODS"."PRECIPITATION" ("DATE" DATE PRIMARY KEY, "PRECIPITATION" FLOAT, "PRECIPITATION_NORMAL" FLOAT);
INSERT INTO "PROJECT_TWO"."ODS"."PRECIPITATION"
SELECT * FROM "PROJECT_TWO"."STAGING"."PRECIPITATION";

# DWH
CREATE SCHEMA "PROJECT_TWO"."DWH";
USE SCHEMA DWH;

CREATE OR REPLACE TABLE "PROJECT_TWO"."DWH"."DIM_BUSINESS" (
    "BUSINESS_ID" STRING PRIMARY KEY, "NAME" STRING, "ADDRESS" STRING, "CITY" STRING, "STATE" STRING,
    "POSTAL_CODE" STRING, "LATITUDE" FLOAT, "LONGITUDE" FLOAT, "STARS" FLOAT, "REVIEW_COUNT" INTEGER,
    "IS_OPEN" INTEGER, "CATEGORIES" STRING);
INSERT INTO "PROJECT_TWO"."DWH"."DIM_BUSINESS"
SELECT
    BUSINESS_ID,
    NAME,
    ADDRESS,
    CITY,   
    STATE,
    POSTAL_CODE,
    LATITUDE,
    LONGITUDE,
    STARS,
    REVIEW_COUNT,
    IS_OPEN,
    CATEGORIES
FROM "PROJECT_TWO"."ODS"."BUSINESS";

CREATE OR REPLACE TABLE "PROJECT_TWO"."DWH"."DIM_USER" (
    "USER_ID" STRING PRIMARY KEY, "NAME" STRING, "REVIEW_COUNT" INTEGER, "YELPING_SINCE" TIMESTAMP, "AVERAGE_STARS" FLOAT
    );
INSERT INTO "PROJECT_TWO"."DWH"."DIM_USER"
SELECT 
    USER_ID,
    NAME,
    REVIEW_COUNT,
    YELPING_SINCE,
    AVERAGE_STARS
FROM "PROJECT_TWO"."ODS"."USER";

CREATE OR REPLACE TABLE "PROJECT_TWO"."DWH"."DIM_CLIMATE" (
    "DATE" DATE PRIMARY KEY, "MIN" FLOAT, "MAX" FLOAT, "NORMAL_MIN" FLOAT, "NORMAL_MAX" FLOAT, "PRECIPITATION" FLOAT, "PRECIPITATION_NORMAL" FLOAT
    );
INSERT INTO "PROJECT_TWO"."DWH"."DIM_CLIMATE"
SELECT 
    DATE,
    MIN,
    MAX,
    NORMAL_MIN,
    NORMAL_MAX,
    PRECIPITATION,
    PRECIPITATION_NORMAL
FROM "PROJECT_TWO"."ODS"."TEMPERATURE" LEFT JOIN "PROJECT_TWO"."ODS"."PRECIPITATION" USING(DATE);

CREATE OR REPLACE TABLE "PROJECT_TWO"."DWH"."FACTTABLE_REVIEW" (
    "FACT_ID" STRING PRIMARY KEY, "USER_ID" STRING, "BUSINESS_ID" STRING, "STARS" INTEGER,
    "USEFUL" INTEGER, "FUNNY" INTEGER, "COOL" INTEGER, "TEXT" STRING, "DATE" DATE,
    CONSTRAINT fk_REVIEW_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES DWH.DIM_USER (USER_ID),
    CONSTRAINT fk_REVIEW_BUSINESS_ID FOREIGN KEY (BUSINESS_ID)
    REFERENCES DWH.DIM_BUSINESS (BUSINESS_ID),
    CONSTRAINT fk_DATE_CLIMATE FOREIGN KEY (DATE)
    REFERENCES DWH.DIM_CLIMATE (DATE)
);
INSERT INTO "PROJECT_TWO"."DWH"."FACTTABLE_REVIEW"
SELECT
    REVIEW_ID AS FACT_ID,
    USER_ID,
    BUSINESS_ID,
    STARS,
    USEFUL,
    FUNNY,
    COOL,
    TEXT,
    CAST(DATE AS DATE) AS DATE
FROM "PROJECT_TWO"."ODS"."REVIEW";